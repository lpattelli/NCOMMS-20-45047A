% Recombine output data generated by CELES_gattaquant.m and analyze the
% resulting intensity distributions
%
% Author: Lorenzo Pattelli

clear, close all

packingfile = 'spherical_target_120k.mat';
fileprefix = packingfile(1:end-4);
load(packingfile)

files = dir([fileprefix,'_Eslice*']);

% load first output file to get the size of the output field maps
load(targetsize,files(1).name)

% assemble plane waves into a field map
recombinedE = zeros(size(Eslice));

Nfiles = length(files);

k = [0; 0; 1]; % original k vector
p = [1; 0; 0]; % polarization vector
kr = zeros(Nfiles, 3);
pr = zeros(Nfiles, 3);

% random amplitude factors
sf = rand([Nfiles,1]);
dephasing = unifrnd(0,2*pi,[Nfiles,1]);

for f = 1:Nfiles
    load(targetsize,files(f).name)
    recombinedE = recombinedE + sf(f) * Eslice * exp(1i*dephasing(f));
    kr(f,:) = RM*k;
    pr(f,:) = RM*p;
end
recombinedE = recombinedE/Nfiles;

% plot resulting intensity
axlim = max(abs(real(recombinedE(:))));
Islice = sum(abs(recombinedE).^2,3);
figure
plot_intensity(gca, pos, prad, Islice, Iptsr, 1)
caxis([0,axlim^2]);

% plot randomly oriented incoming k vectors used for the simulations
figure
quiver3(kr(:,1), kr(:,2), kr(:,3), -kr(:,1), -kr(:,2), -kr(:,3), 'LineWidth',1, 'MaxHeadSize',0.05, 'AutoScaleFactor',2), axis equal tight, hold on
quiver3(kr(:,1), kr(:,2), kr(:,3), pr(:,1), pr(:,2), pr(:,3), 'LineWidth',1, 'AutoScaleFactor',0.5)

%% now recombine the field measured at the nanorulers

files = dir([fileprefix,'_Erods*']);

load(files(1).name)

recombinedE = zeros(size(Erod));

Nfiles = length(files);

for f = 1:Nfiles
    load(files(f).name)
    recombinedE = recombinedE + sf(f) * Erod * exp(1i*dephasing(f));
end

Irod = sum(abs(recombinedE).^2,3);

axlim = max(Irod(:));
figure
imagesc(Irod)
axis tight, caxis([0 axlim])

%% plot intensity histograms along the nanorulers
Iedges = 0:0.05:10;
pdfaxis = Iedges + mean(diff(Iedges))/2;

sourcedists = 0:5:Lrods;
colors = cool(length(sourcedists));

%% average over different dephasing combinations
dephasing = zeros(size(files));
Ndephrealiz = 100;

for dr = 1:Ndephrealiz
    recombinedE = zeros(size(Erod));
    sf = rand([Nfiles,1]);
    dephasing = unifrnd(0,2*pi,[Nfiles,1]);
    for f = 1:Nfiles
        load(fullfile('output sphere',targetsize,files(f).name))
        recombinedE = recombinedE + sf(f) * Erod * exp(1i*dephasing(f));
    end
    Irod = sum(abs(recombinedE).^2,3);
    
    pdfs = zeros(length(sourcedists), length(pdfaxis(1:end-1)));
    for i = 1:length(sourcedists)
        sd = sourcedists(i);
        intensity = Irod(:, 1) + Irod(:, 1+sd/resolution);
        pdfs(i,:) = pdfs(i,:) + histcounts(intensity/mean(intensity), Iedges, 'Normalization', 'pdf');
    end
    
    dlmwrite(['zno_gattaquant_0-350_',int2str(dr),'.dat'], pdfs.', 'precision', 8, 'delimiter', '\t')
end

%% skip previous section if the pdfs have been already written to the dat files
files = dir('zno_gattaquant_0-350_*.dat');
pdfs = zeros(size(pdfs));
for ff = 1:length(files)
    temp = dlmread(files(ff).name);
    pdfs = pdfs + temp.';
end
pdfs = pdfs/length(files);

figure
set(gca, 'ColorOrder', colors, 'NextPlot', 'replacechildren');
semilogy(pdfaxis(1:end-1), pdfs)
xlabel('I/<I>')
ylabel('p(I/<I>)')

%% fit distribution for different nanoruler lengths and plot exponents

ft = fittype( '((N^N)/(gamma(N)))*x^(N-1)*exp(-N*x)', 'independent', 'x', 'dependent', 'y' );

x = pdfaxis(1:end-1).'; y = pdfs.';
x_fit = 0:0.01:9.99;
StrtPnt = 1; LwrBnd = 0;
Nvalues = zeros(numel(sourcedists),1);
figure
for ii = 1:numel(sourcedists)
    subplot(4,13,ii);
    invalididx = (y(:,ii) == 0);
    [fitresult, gof] = fit( x(~invalididx), y(~invalididx,ii), ft, 'StartPoint', StrtPnt, 'Lower', LwrBnd );
    semilogy(x,y(:,ii),'.k', x_fit, fitresult(x_fit),'r'); axis([0 8 1e-5 1e1])
    legend(sprintf('L = %d nm', sourcedists(ii)), sprintf('N = %g', fitresult.N))
    Nvalues(ii,1) = fitresult.N;
end

figure, plot( sourcedists, Nvalues(:,1), '.-' )
xlabel('D [nm]')
ylabel('N(D)')
